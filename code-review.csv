sha,filename,url,lines,title,comment,priority,additional
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Settings/ExportVaultPageViewModel.cs","","105:20-105:73","[Threading] Avoid Task.Result usage ","Avoid Task.Result usage in application in apps with the UI thread, this can cause deadlocks, await a task instead.","3",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/Core/Services/ApiService.cs","","415:0-416:88","[Performance] Data deserialization/decryption is happening on the UI thread","Result of http requests is processed on UI thread (awaited), parsed (json) or even decrypted. This pattern affects performance because the actual data processing is happening on the calling thread and in most cases it's the UI thread. The issue found in a few places: ApiService.cs#L407, AuditService.cs#L36, CipherService#L610,L792.","2",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/Core/Services/BroadcasterService.cs","","21:24-21:73","[Architecture] Messenger pub/sub pattern increases complexity","BroadcasterService generates a thread for every subscriber on every message send, this could generate lots of threads. Moreover there is no error handling in case if subscriber failed. This will also can lead to a race conditions. I would recommend to use sequential subscribers calls with proper error handling and use just a single thread to send a message. I would also avoid using Pub/Sub pattern to decrease complexity and make it easier to debug/maintain. As instead, introduce services and inject them where needed via interfaces to be called.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/Core/Services/ApiService.cs","","138:0-138:0","[Maintainability] Error handling issues (empty catch, rethrow)","In some places we found empty catches, which is a significant maintainability issue, there is no visibility is any error happen, empty catch found in a few places: Attachment.cs#L55, AuthService.cs#L312, MobilePlatformUtilsService#L236. Also in some places re-throw logic doesn't supply an original error details which leads to a missing stack trace ApiService.cs#L138. In case of re-throwing error as is, no need to specify a variable name, this will help to keep the original error stack trace AuthService.cs#L236","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/Core/Services/LockService.cs","","151:12-151:70","[Threading] Return task without async/await","Return a Task directly without async/await when no Task result processing is required. It will reduce overhead related to restoring the execution context.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/Core/Services/PclCryptoFunctionService.cs","","214:0-217:69","[Performance] Manual string processing affects memory and performance","Work with strings using Regex (preferred) or StringBuilder instead of sequenced string. Replace to optimize memory management and performance.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Vault/GroupingsPage/GroupingsPage.xaml.cs","","99:28-99:55","[Threading] Not awaited task execution","An asynchronous method which returns a task is called without await and without subsequent task processing which can lead to silent errors and unpredictable app behavior.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Vault/GroupingsPage/GroupingsPage.xaml.cs","","108:15-127:17","[Maintainability] Custom retry logic with magic numbers in code ","Retry data loading in catch make it more complex to support and edit retry logic. It's better to use a retry framework to do this kind of tasks (e.g. Polly).","1","https://alastaircrabtree.com/implementing-the-retry-pattern-using-polly/"
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/BaseViewModel.cs","","15:0-15:45","[XF] BaseViewModel depends on XF PageContent","ViewModel has direct reference to Page (PageContent). ViewModels shouldn't know anything about XF or page. All the required XF functionality should be injected with IoC and services. A good practice is to move View Models to a project which doesn’t depends on XF package to make sure no dependencies will be added in future, it helps to avoid coupling, improves testability and maintainability of the ViewModels code","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Vault/GroupingsPage/GroupingsPage.xaml","","91:16-131:44","[XF] Switch from ListView to CollectionView","XF is going to improve CollectionView going forward. This is now the main control to render collection of elements, highly optimized for the best performance. Also the ListView control affects the memory performance because of recently discovered memory leak confirmed in this app. The ListView control will be supported but it's recommended to switch to the CollectionView as better alternative.","3",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Controls/MiButton.cs","","11:0-16:26","[XF] Controls customization with styles is more flexible than with custom classes","Material, Mono, FontAwesome buttons and labels controls are introduced into the code base to support custom fonts. It's better (easer and more flexible, maintainable) to use styles, changed dynamically with a theme.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Controls/RepeaterView.cs","","6:4-6:43","[XF] Replace RepeaterView with ItemsSource/ItemTemplate","RepeaterView is a custom StackLayout with ItemsSource/ItemTemplate properties. It’s supported by XF with attached properties ItemsSource/ItemsTemplate. Please also consider using CollectionView whenever you have unpredictable number of items to ensure the best possible experience.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/iOS.Extension/MainInterface.storyboard","","","[XF] Use Xamarin.Forms in iOS extension projects","Lots of existing XF pages where re-implemented in iOS extensions natively. There is a way to reuse existing logic in the iOS extensions as well.","2","https://docs.microsoft.com/en-us/xamarin/ios/platform/extensions-with-xamarinforms"
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/App.xaml.cs","","45:0-67:0","[Performance] Heavy app startup","This constructor will directly affect app startup performance before the app is interactive. It's better to keep this method as simple as possible and offload all the logic for later.","1",""
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Vault/AttachmentsPage.xaml","","29:1-95:17","[XF] Multiple nested layouts decrease performance","Avoid creating multiple nested layouts, use shallow layout instead: AddEditPage.xaml#L56 (nesting level 4), AttachmentsPage.xaml#L30 (nesting level 6), ScanPage.xaml#L16. Items layout especially affects the performance - AutofillCiphersPage.xaml#L66, especially in repeater as long as items are not recycled - CollectionsPage.xaml#L38, SharePage.xaml#L65","3","https://docs.microsoft.com/en-us/xamarin/xamarin-forms/deploy-test/performance#optimize-layout-performance"
"cd3585be58672aa646fd3293ccfc051c6fe29a53","/src/App/Pages/Vault/GroupingsPage/GroupingsPage.xaml","","1:0-10:28","[XF] Apply Xamarin.Forms best practices for high performance layouts","Most of the items are already addressed in the code, want to outline the list here to make sure every item is taken into account: xaml compiler, compiled bindings, less bindings, fast renderers, startup tracing, layout compression, optimized layout, optimized images, shallow visual tree","2","https://docs.microsoft.com/en-us/xamarin/xamarin-forms/deploy-test/performance"
